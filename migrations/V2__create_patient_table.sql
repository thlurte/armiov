CREATE TABLE IF NOT EXISTS patient_records (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Auto-incrementing primary key using IDENTITY
    first_name VARCHAR(255) NOT NULL, -- Patient's first name
    last_name VARCHAR(255) NOT NULL, -- Patient's last name
    date_of_birth DATE DEFAULT NULL, -- Patient's date of birth
    gender VARCHAR(50) DEFAULT NULL, -- Patient's gender (e.g., Male, Female, Other)
    contact_number VARCHAR(255) DEFAULT NULL, -- Patient's contact number
    email VARCHAR(255) DEFAULT NULL, -- Patient's email address
    address TEXT DEFAULT NULL, -- Patient's residential address
    medical_history TEXT DEFAULT NULL, -- Detailed medical history of the patient
    symptoms TEXT DEFAULT NULL, -- Symptoms reported by the patient
    diagnosis TEXT DEFAULT NULL, -- Diagnosis provided by the healthcare provider
    treatment_plan TEXT DEFAULT NULL, -- Treatment plan or recommendations
    test_results TEXT DEFAULT NULL, -- Results of any tests conducted
    notes TEXT DEFAULT NULL, -- Additional notes from the healthcare provider
    diagnosis_ts TIMESTAMP DEFAULT NULL, -- Timestamp of when the diagnosis was made
    created_ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Timestamp of record creation
    updated_ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP -- Timestamp of last update
);

-- Trigger to update the `updated_ts` column on row modification
CREATE OR REPLACE FUNCTION update_updated_ts()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_ts = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_updated_ts
BEFORE UPDATE ON patient_records
FOR EACH ROW
EXECUTE FUNCTION update_updated_ts();